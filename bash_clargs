#!/usr/bin/env bash

# CLOPTS is a required array of option descriptions.  See "demo"
#
# FIELD_DELIM will be used as IFS to break CLOPTS lines.  Its
#    default value is '|'

# The second field of a CLOPTS line dictates the option action:
#    No prefix : variable name : set from argument following option
#    -         : variable name : set flag variable to 1
#    +>        : function name : call function using following option as function's argument
#    ->        : function name : call function without arguments
#
# bash_clargs_process() is the primary function.  Call it in global
#    scope like this:
#    bash_clargs_process "$@"
#
# bash_clargs_usage() can be used to display basic option documentation.
#
# bash_clargs_show() shows values in the CLOPTS definition

BC_colon="[32;1m"

bash_clargs_immediate_task() { [ "${1:0:1}" = '-' ]; }
bash_clargs_function_task() { local re='^[-+>]{2}.*$'; [[ "$1" =~ $re ]]; }


# By default, this function shows the options and calls "exit"
# to terminate the script.  Add any parameter to bypass the
# exit.  One might do this if bash_clargs_usage() is used within
# a usage display with a larger scope.
bash_clargs_usage()
{
    local IFS="$FIELD_DELIM"
    local row
    local -a fields
    local arg desc

    for row in "${CLOPTS[@]}"; do
        # Get row info
        fields=( $row )
        arg="${fields[0]}"
        desc="${fields[2]}"

        echo "${BC_colon}-${arg}[m: ${desc}"
    done

    echo

    if [ "$#" -eq 0 ]; then
        exit 0
    fi
}

bash_clargs_set_var()
{
    local -n var="$1"
    var="$2"
}

bash_clargs_show_var()
{
    local -n var="$1"
    echo "${BC_colon}$1[m = ${BC_colon}$var[m"
}

bash_clargs_show()
{
    local IFS="$FIELD_DELIM"
    local row
    local -a fields
    local vname
    local re='^-?(.*)$'

    for row in "${CLOPTS[@]}"; do
        # Get row info
        IFS="$FIELD_DELIM"
        fields=( $row )
        vname="${fields[1]}"

        if ! bash_clargs_function_task "$vname" ; then
            if [[ "$vname" =~ $re ]]; then
                bash_clargs_show_var "${BASH_REMATCH[1]}"
            fi
        fi
    done

    echo
}

bash_clargs_seek_opt_row()
{
    local opt="${1:1:1}"
    local row
    for row in "${CLOPTS[@]}"; do
        if [ "${row:0:1}" = "$opt" ]; then
            echo "$row"
            return 0
        fi
    done

    return 1
}

bash_clargs_process_task_deferred()
{
   local task="$1"
    if [ "${task:1:1}" = '>' ]; then
        "${task:2}" "$2"
    else
        bash_clargs_set_var "${task:1}" "$2"
    fi
}

bash_clargs_process_task_immediate()
{
    local task="$1"
    if [ "${task:1:1}" = '>' ]; then
        "${task:2}"
    else
        bash_clargs_set_var "${task:1}" 1
    fi

}

bash_clargs_process()
{
    if [ -z "$CLOPTS" ]; then
        echo "Missing CLOPTS options info array." >&2
        exit 1
    fi

    # Set default delimiter values if not already set:
    if [ -z "$FIELD_DELIM" ]; then
        FIELD_DELIM=$'|'
    fi

    local IFS="$FIELD_DELIM"
    local arg

    local opt_row
    local -a opt_vals;

    # Option letter made available for called commands to
    # help provide useful feedback for value errors.
    local CUR_OPT

    local task

    for arg in "$@"; do
        if [ "$task" ]; then
            if [ "${task:0:2}" = '+>' ]; then
                bash_clargs_process_task_deferred "$task" "$arg"
            else
                bash_clargs_set_var "$task" "$arg"
            fi
            task=
            CUR_OPT=
        elif [ "${arg:0:1}" = '-' ]; then
            if opt_row=$( bash_clargs_seek_opt_row "$arg" ); then
                opt_vals=( $opt_row )
                CUR_OPT="${opt_vals[0]}"
                task="${opt_vals[1]}"
                if bash_clargs_immediate_task "$task"; then
                    bash_clargs_process_task_immediate "$task"
                    task=
                fi
            else
                echo "Unknown option ${BL_colon}$arg[m"
                exit 1
            fi
        else
            echo "Could be processing ordered arguments, not associated with an option"
        fi
    done

    if [ "$task" ]; then
        bash_clargs_process_task_immediate "$task"
    fi
}


